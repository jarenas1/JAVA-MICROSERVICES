resilience4j:
  circuitbreaker:
    configs:
      default: #NOMBRE DE LA CONFIGURACION
        sliding-window-size: 6
        failure-rate-threshold: 50
        wait-duration-in-open-state: 20s
        permitted-number-of-calls-in-half-open-state: 4
        slow-call-duration-threshold: 7s
        slow-call-rate-threshold: 50

    instances: #INSTANCIAS A APLICAR
      products: #NOMBRE DE NUESTRO CONTROLLER
        base-config: default #NOMBRE DE LA CONFIGURACION CREADA ARRIBA

        #RECORDAR QUE EL TIME LIMITER VA POIR FUERA DE LA CONFIGURACION INICIAL
  timelimiter:
    configs:
      default:
        timeout-duration: 5s
    instances:
      products:
        base-config: default

spring:
  ##CONFIGURACION DEL SERVIDOR DE RECURSO PARA VALIDACION DE TOKEN ETC ...
  security:
    oauth2:
      # Configura el servidor de recursos para que valide los JSON Web Tokens
      resourceserver:
        jwt:
          #Especifica la URI del servidor de autorizaci√≥n (authorization server), que es el encargado de emitir y validar los tokens.
          issuer-uri: http://127.0.0.1:9100  #uri de servidor de autorizacion, RUTA BASICA
          #CONFIGURACION DE CLIENTE DE OAUTH2
      client:
        #se registra como un cliente del servidor de autorizacion, es decir, podra obtener tokens
        registration:
          client-app: #NOMBRE QUE LE ESTAMOS DANDO A ESTE CONSUMIDOR DEL SERVER DE AUTH, SE DEBE PONER EN SUS CONFIGURACIONES
            provider: spring #nombre del prooveedor de autorizacion, puede ser cualquiera
            client-id: gateway #ESTE ES EL ID QUE SE LE DIO EN EL SERVIDOR DE AUTORIZACION
            client-secret: secret #igual que lo de arriba
            authorization-grant-type: authorization_code
            redirect-uri: http://127.0.0.1:8090/authorized #RUTA CREADA EN EL COTROLADOR DEL GATEWAY PARA RETORNAR EL TOKEN
            scope:
              ##Lo mismo qu tenemos en el servidor de autorizacion
              - openid
              - profile
            client-name: client-app
            ##ESPECIFICAMOS CUAL ES EL PROOVEDOR DE AUTORIZACION
        provider:
          spring: #NOMBRE DECLARADO ARRIBA Y RUTA DEL SERVIDOR DE AUTORIZACION
            issuer-uri: http://127.0.0.1:9100



  cloud:
    gateway:
      routes:
        - id: msvc-products
          uri: lb://msvc-products
          predicates:
            - Path=/api/products/**
#            - Header=token, 12345
#            - Method=GET, POST
#            - Query=color, verde #ESTOS SON QUERY PARAMS
#            - Cookie=color, red
          filters:
            - StripPrefix=2
            - name: CircuitBreaker #PARA PODER HACER QUE LANCE LOS ERRORES POR MEDIO DE EXCEPCIONES DEBEMOS INIDCAR QUE TIPO DE ERORES VA A RECIBIR ACA
              args:
                name: products #NOMBRE DEL SERVICIO
                statusCodes: 500, 404 #ETC ...
                # SI FALLA ALGO REDIRIGIMOS A UNA URI
                fallbackUri: forward:/api/items/5
#            - name: SampleCookie
#              args:
#                message: Mensaje de la cookie q chimba, PRODUCTOS
#                name: user
#                value: JuanitoJose
        - id: msvc-items
          uri: lb://msvc-items
          predicates:
            - Path=/api/items/**
          filters:
            - StripPrefix=2
            - AddRequestHeader=token-request, juanjo
            - AddResponseHeader=token-response, 1234567
            - AddRequestParameter=name, Value
        - id: msvc-users
          uri: lb://msvc-users
          predicates:
            - Path=/api/users/**
          filters:
            - StripPrefix=2
            ##SEGURIDAD
        - id: msvc-oath
          uri: lb://msvc-oauth
          predicates:
            - Path=/api/security/**
          filters:
            - StripPrefix=2

