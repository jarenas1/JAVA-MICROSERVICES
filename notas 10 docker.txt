DOCKER

Proveedor de contenedores, los cuales son como una maquina virtual PERO EN SI NO SON LO MISMO, DOCKER ES MAS OPTIMIZADO Y MAS PEQUEÑO 


Crear una imagen de Docker:

1. Generamos el jar para poderlo ejecutar luego en el contenedor ponemos ./mvnw package clean

2. Creamos un archivo Dockerfile asi, sin exension, este se crea en la carpeta inicial del proyecto

FROM amazoncorretto:17-alpine-jdk
#CARPETA DONDE GUARDAREMOS TODO
WORKDIR /app
#PUERTO QUE SE EXPONE AL LEVANTAR
EXPOSE 8888
#AÑADIMOS EL JAR AL CONTENEDOR Y LE DAMOS UN NOMBRE
ADD ./target/config-project-0.0.1-SNAPSHOT.jar config-server.jar

#INSTRUCCIONES PARA CUANDO SE LEVANTE EL CONTENEDOR
#LEVANTAR EL JAR
ENTRYPOINT ["java","-jar","config-server.jar"]


3. corremos para generar la imagen con docker build -t nameOfImage:version .

ej: docker build -t config-server:v1 .

4. verificamos que se creo la imagen con docker images, veremos una serie de parámetros como su id, por medio de el podrmeos eliminar la imagen etc

5. creamos una red en común para levantar luestros contenedores docker network create name docker network create springcloud

6. Levantamos los contenedores docker run -p 8888:8888 --name Alias --network Name ImgeName 

-p es el primero es el puerto externo, es decir el puerto en el que se levantara en el pc y el otro es el interno es decir en el que se levantara en el container. -name Da como una especie de nombre de dominio.  -network es la network a la que lo añadiremos, como se creo anteriormente una, y lo ultimo es el nombre de la imagen, recordar el :versión

EJ:  docker run -p 8888:8888 --name spring-config --network springcloud config-server:v1 

DOCKER PS muestra contenedores en ejecucion




DOCKER IMAGE --HELP muestra los comandos de las imágenes como borrar y eso



comandos;

Gestión de imágenes

Copiar# Construir una imagen desde un Dockerfile
docker build -t nombre-imagen:tag .

# Listar todas las imágenes disponibles
docker images

# Eliminar una imagen
docker rmi nombre-imagen:tag

# Descargar una imagen del Docker Hub
docker pull nombre-imagen:tag

# Publicar una imagen en Docker Hub
docker push nombre-usuario/nombre-imagen:tag

-----

Gestión de contenedores

Copiar# Crear y ejecutar un contenedor
docker run --name mi-contenedor -p 8080:8080 -d nombre-imagen:tag

# Crear y ejecutar un contenedor con volumen montado
docker run --name mi-app -v /ruta/local:/ruta/contenedor -p 8080:8080 -d nombre-imagen:tag

# Listar contenedores en ejecución
docker ps

# Listar todos los contenedores (incluyendo los detenidos)
docker ps -a

# Detener un contenedor
docker stop nombre-contenedor

# Iniciar un contenedor detenido
docker start nombre-contenedor

# Eliminar un contenedor
docker rm nombre-contenedor

# Ver logs de un contenedor
docker logs nombre-contenedor

# Ver logs en tiempo real
docker logs -f nombre-contenedor

# Ejecutar un comando dentro de un contenedor en ejecución
docker exec -it nombre-contenedor comando


------------------

Comandos para desarrolladores Java
Ejemplo de Dockerfile para aplicación Java


CopiarFROM openjdk:11-jdk

WORKDIR /app

COPY target/mi-aplicacion.jar /app/app.jar

EXPOSE 8080

CMD ["java", "-jar", "app.jar"]
Ejecutar contenedor con aplicación Spring Boot


# Construir imagen
docker build -t mi-app-spring:1.0 .

# Ejecutar contenedor
docker run --name mi-spring-app -p 8080:8080 -d mi-app-spring:1.0

-------------------------------

Ejecutar MySQL para desarrollo
docker run --name mysql-dev -e MYSQL_ROOT_PASSWORD=password -e MYSQL_DATABASE=midb -p 3306:3306 -d mysql:8

-------------------------------------------------

Ejecutar PostgreSQL para desarrollo

Copiardocker run --name postgres-dev -e POSTGRES_PASSWORD=password -e POSTGRES_DB=midb -p 5432:5432 -d postgres:13

----------------------------------------------

Docker Compose
Archivo docker-compose.yml básico para aplicación Java + base de datos
Copiarversion: '3'
services:
  app:
    build: .
    ports:
      - "8080:8080"
    depends_on:
      - db
    environment:
      - SPRING_DATASOURCE_URL=jdbc:postgresql://db:5432/midb
      - SPRING_DATASOURCE_USERNAME=postgres
      - SPRING_DATASOURCE_PASSWORD=password

  db:
    image: postgres:13
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=midb
      - POSTGRES_PASSWORD=password

-------------------------------------

Comandos Docker Compose
# Iniciar todos los servicios definidos
docker-compose up -d

# Detener todos los servicios
docker-compose down

# Ver logs de todos los servicios
docker-compose logs

# Ver logs de un servicio específico
docker-compose logs app

# Reconstruir servicios
docker-compose build

# Reiniciar un servicio específico
docker-compose restart app
Comandos adicionales útiles

# Inspeccionar un contenedor para ver detalles
docker inspect nombre-contenedor

# Ver estadísticas de uso de recursos
docker stats

# Limpiar recursos no utilizados (contenedores parados, imágenes sin uso)
docker system prune

# Limpiar todo, incluyendo volúmenes
docker system prune -a --volumes

# Crear una red personalizada
docker network create mi-red

# Conectar contenedor a una red
docker network connect mi-red nombre-contenedor




--------------------------------------------------------

CREAR BASE DE DATOS MYSQL CON DOCKER


1. Vamos a dockerhub y buscamos la imagen oficial y copiamos el pull

2. una vez bajada la imagen, crearemos un contenedor con esta y lo levantaremos, hay que tener en cuenta que usaremos el Docker run, pero debemos poner ciertas variables por medio de guiones - las cuales se especifican den Docker hub 

docker run -p 3307:3306 -- network springcloud -e MYSQL_ROOT_PASSWORD=jarenas1 -e MYSQL_DATABASE=db_spring_cloud --name mysqlcloud mysql




DOCKERIZACION DE ZIPKIN, CREAR CONTENEDOR: docker run -p 9411:9411 --name zipkin-server --network springcloud -e STORAGE_TYPE=mysql -e MYSQL_USER=urlruraqazplhpoa -e MYSQL_PASS=k9cljVhBmEu1yvilIPoD -e MYSQL_HOST=bq3wnnen5rbatel2fp74-mysql.services.clever-cloud.com zipkin-server:v1 

Esto debido a que deseamos guardar los logs en la database


AHORA TENEMOS QUE TENER EN CUENTA QUE EUREKA Y ZIPKIN YA NO ESTAN EN LOCALHOST SI NO ES DOCKER, por ende en vez de localhost, ponemos el nombre que tiene el contenedor ej, en vez de localhost:8080 ponemos eureka-server:8080

zipkin, debemos configurarle la ruta, ya que por defecto el usa localhost



AHORA DEBEREMOS AÑADIR EL RESTO DE MCRO SERVICIOS A DOCKER PARA QUE PUEDAN PERTENECER A LA MISMA NETWORK Y PUEDAN LEER POR MEDIO DEL NOMBRE DEL CONTENEDOR

Como todos los msvc dependen de eureka y de zipkin, y al intentarlos dockerizar debemos generar el jar, no pasaran los test, debido a que no encontraran estos servidores, por ende para saltarnos elt est y generar el jar:

./mvnw clean package -DskipTests

 docker run -p 6666:6666 --name msvc-users --network springcloud msvc-users:v1



DOCKERIZAR EL GATEWAY 


IREMOS AL YML, y cambiaremos todos los localhost o los 127.0.0.1 por variables de entorno ${IP_ADDR:http://127.0.0.1:9100}

LUEGO GENERAMOS EL JAR

levantamos IMAGEN

Y AL LEVANTAR EL CONTENEDOR, PONEMOS -e nombreVarEnt=192.168.1.133:9100  este valor es el valor de ip publica de nuestra casa




BALANCEO DE CARGA: PODEMOS DECIRLE A DOCKER QUE EL PUERTO SEA ALEATORIO A LA HORA DE CREAR EL CONTENEDOR, en vez de -p ip1:ip2, ponemos solo -P para decir que el puerto sea automatico y en el docjerfile no ponemos


Para generar varias instancias de un proyecto, es mandatorio que el puerto sea aleatorio, y simplemente por medio de la imagen generada inicialmente, vamos creando varios contenedores 




DOCKER COMPOSE:

Tenemos las configuraciones para generar un contenedor (Es como un orquestador) básicamente es lo mismo pero mas ordenadito

CREARLO: nos vamos a la carpeta donde tenemos todos los microservicios y creamos una carpeta llamada docker-compose

Creamos un archivo llamado docker-compose.yml

en este yml, inicialmente crearemos el network de los containers

networks:
  springcloud:


Luego crearemos las configuraciones de cada contenedor

services:
  config-server:
    container_name: config-server
    image: config-server:v1
    ports:
      - "8888:8888"
    restart: always #si no levanta sigue intentando hasta que levante
    networks:
      - springcloud
  eureka-server:
    container_name: eureka-server
    image: eureka-server:v1
    ports:
      - "8761:8761"
    restart: always
    networks:
      - springcloud



Y nos vamos a la carpeta donde esta en yml y ponermos Docker compose up

Si hacemos este comando y ya están creados los contenedores solo los levanta

Para detener podemos usar ctrl+c /Docker compose stop // o Docker compose down para detener y eliminar


VARIABLES DE ENTORNO:

Al crear un contenedor puede que necesitemos variables de entorno, para esto se añade esto a la creación del contenedor 

  mysql8:
    container_name: mysqlspring
    image: mysql
    ports:
      - "3307:3306"
    restart: always
    networks:
      - springcloud
    #VARIABLES DE ENTORNO
    environment:
      - MYSQL_DATABASE=db_springboot_cloud
      - MYSQL_ROOT_PASSWORD=JAJEJA2121

AÑADIR SCHEMA A UNA BASE DE DATOS:

Como estos contenedores recién van a ser levantados, la base de datos estará vacia, por ende si deseamos añadir un esquema -- debemos hacer todo desde MySQL


DEPENDENCIAS EN LOS CONTENEDORES:

Tenemos contenedores que pueden depender de otro contenedores, por ende lo que podemos hacer es que podemos crear el contenedor así 

  msvc-products:
    container_name: msvc-products
    image: msvc-products
    ports:
      - "8001:8001"
    restart: always
    networks:
      - springcloud
    #COSAS DE LAS QUE DEPENDE ESTE CONTENEDOR(No se levantara hasta que lo que lo alimenta se levante
    depends_on:
      - eureka-server
      - zipkin-server

LEVANTQAR UN CONTENEDOR ESPECIFICO:

Docker compose up -d containerName


LEVANTAR VARIAS INSTANCIAS, PARA ESTO DEBEMOS TENER EL PUERTO ALEATORIO, QUE SE ASIGNA DEJANDO LA XREACION DEL CONTENEDOR SIN PUERTO, Y AÑADIMOS LA PROPIEDAD 

deploy:
	replicas: #